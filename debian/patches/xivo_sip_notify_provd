Index: asterisk-15.2.0/channels/chan_sip.c
===================================================================
--- asterisk-15.2.0.orig/channels/chan_sip.c
+++ asterisk-15.2.0/channels/chan_sip.c
@@ -556,6 +556,11 @@
 			via multiple <literal>Variable: name=value</literal> sequences.</para>
 		</description>
 	</manager>
+	<manager name="SIPnotifyprovd" language="en_US">
+		<synopsis>
+			Send a SIP notify. Deprecated in favor of SIPnotify.
+		</synopsis>
+	</manager>
 	<manager name="SIPpeerstatus" language="en_US">
 		<synopsis>
 			Show the status of one or all of the sip peers.
@@ -15543,20 +15548,54 @@ static int transmit_notify_with_sipfrag(
 	return send_request(p, &req, XMIT_RELIABLE, p->ocseq);
 }
 
+static int sipnotify_cmp_cb_by_ip(void *obj, void *arg, int flags)
+{
+	struct sip_peer *peer = obj, *peer2 = arg;
+
+	if (ast_sockaddr_cmp_addr(&peer->addr, &peer2->addr)) {
+		/* IP doesn't match */
+		return 0;
+	}
+
+	return CMP_MATCH | CMP_STOP;
+}
+
 static int manager_sipnotify(struct mansession *s, const struct message *m)
 {
 	const char *channame = astman_get_header(m, "Channel");
+	const char *peerip = astman_get_header(m, "PeerIP");
+	char peername[80];
 	struct ast_variable *vars = astman_get_variables_order(m, ORDER_NATURAL);
 	struct sip_pvt *p;
 	struct ast_variable *header, *var;
 
-	if (ast_strlen_zero(channame)) {
-		astman_send_error(s, m, "SIPNotify requires a channel name");
-		return 0;
-	}
+	if (!ast_strlen_zero(channame)) {
+		if (!strncasecmp(channame, "sip/", 4)) {
+			channame += 4;
+		}
+		ast_copy_string(peername, channame, sizeof(peername));
+	} else if (!ast_strlen_zero(peerip)) {
+		struct ast_sockaddr addr;
+		struct sip_peer tmp_peer;
+		struct sip_peer *peer;
+
+		if (!ast_sockaddr_parse(&addr, peerip, 0)) {
+			astman_send_error(s, m, "Could not parse peer IP");
+			return 0;
+		}
 
-	if (!strncasecmp(channame, "sip/", 4)) {
-		channame += 4;
+		ast_sockaddr_copy(&tmp_peer.addr, &addr);
+		peer = ao2_callback(peers_by_ip, OBJ_POINTER, sipnotify_cmp_cb_by_ip, &tmp_peer);
+		if (!peer) {
+			astman_send_error(s, m, "No matching peer found");
+			return 0;
+		}
+
+		ast_copy_string(peername, peer->name, sizeof(peername));
+		sip_unref_peer(peer, "manager_sipnotify: unref peer from ao2_callback");
+	} else {
+		astman_send_error(s, m, "SIPNotify requires a channel name or peer IP");
+		return 0;
 	}
 
 	if (!(p = sip_alloc(NULL, NULL, 0, SIP_NOTIFY, NULL, 0))) {
@@ -15564,7 +15603,7 @@ static int manager_sipnotify(struct mans
 		return 0;
 	}
 
-	if (create_addr(p, channame, NULL, 0)) {
+	if (create_addr(p, peername, NULL, 0)) {
 		/* Maybe they're not registered, etc. */
 		dialog_unlink_all(p);
 		dialog_unref(p, "unref dialog inside for loop" );
@@ -35279,6 +35318,7 @@ static int load_module(void)
 	ast_manager_register_xml("SIPqualifypeer", EVENT_FLAG_SYSTEM | EVENT_FLAG_REPORTING, manager_sip_qualify_peer);
 	ast_manager_register_xml("SIPshowregistry", EVENT_FLAG_SYSTEM | EVENT_FLAG_REPORTING, manager_show_registry);
 	ast_manager_register_xml("SIPnotify", EVENT_FLAG_SYSTEM, manager_sipnotify);
+	ast_manager_register_xml("SIPnotifyprovd", EVENT_FLAG_SYSTEM, manager_sipnotify);
 	ast_manager_register_xml("SIPpeerstatus", EVENT_FLAG_SYSTEM, manager_sip_peer_status);
 	sip_poke_all_peers();
 	sip_keepalive_all_peers();
@@ -35396,6 +35436,7 @@ static int unload_module(void)
 	ast_manager_unregister("SIPqualifypeer");
 	ast_manager_unregister("SIPshowregistry");
 	ast_manager_unregister("SIPnotify");
+	ast_manager_unregister("SIPnotifyprovd");
 	ast_manager_unregister("SIPpeerstatus");
 
 	/* Kill TCP/TLS server threads */
